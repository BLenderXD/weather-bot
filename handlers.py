from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageCantBeEdited, InlineKeyboardExpected
from bot import dp
from database import register_user_if_not_exists, log_query, find_cities_in_db
from weather import get_weather_label, get_detailed_weather, check_city_exists
from keyboards import main_menu, get_back_keyboard
from states import States
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –µ—Å—Ç—å

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ FSM
async def set_pagination_state(state: FSMContext, cities: list, page: int = 1):
    await state.update_data(cities=cities, current_page=page)

async def get_pagination_state(state: FSMContext) -> tuple[list, int]:
    data = await state.get_data()
    return data.get("cities", []), data.get("current_page", 1)

def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'], state='*')
    async def cmd_start(message: types.Message, state: FSMContext):
        await state.finish()
        register_user_if_not_exists(message.from_user.id)

        text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é, {message.from_user.first_name}!\n\n"
            "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:"
        )
        kb = main_menu  # ReplyKeyboardMarkup –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        try:
            await message.edit_text(text, reply_markup=kb, parse_mode="Markdown")  # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        except (MessageCantBeEdited, InlineKeyboardExpected):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(text, reply_markup=kb, parse_mode="Markdown")

    @dp.message_handler(lambda msg: msg.text == "üå° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤", state='*')
    async def handle_view_cities(message: types.Message, state: FSMContext):
        kb = get_back_keyboard()
        text = (
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í–æ–ª–≥–æ–≥—Ä–∞–¥, –í–æ—Ä–æ–Ω–µ–∂, –í–æ–ª–∂—Å–∫–∏–π, –ü–µ—Ä–º—å¬ª"
        )
        try:
            await message.edit_text(text, reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        except MessageCantBeEdited:
            await message.answer(text, reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

        await States.waiting_for_cities.set()

    @dp.callback_query_handler(lambda c: c.data == "back_to_menu", state='*')
    async def callback_back(query: types.CallbackQuery, state: FSMContext):
        await query.answer()
        await state.finish()

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º edit_text, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await cmd_start(query.message, state)
        except InlineKeyboardExpected:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {query.from_user.first_name}!\n\n"
                "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É ‚Äî *—Ç–æ–ª—å–∫–æ –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                reply_markup=main_menu,
                parse_mode="Markdown"
            )

    @dp.message_handler(lambda msg: msg.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", state='*')
    async def handle_my_profile(message: types.Message, state: FSMContext):
        user = message.from_user
        back_kb = get_back_keyboard()

        username = user.username if user.username else "(–Ω–µ—Ç)"
        language = user.language_code if user.language_code else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

        text = (
            "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"‚Ä¢ –ò–º—è: {user.first_name}\n"
            f"‚Ä¢ ID: {user.id}\n"
            f"‚Ä¢ –í–∞—à tg: @{username}\n"
            f"‚Ä¢ –Ø–∑—ã–∫: {language}"
        )
        try:
            await message.edit_text(text, reply_markup=back_kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
        except MessageCantBeEdited:
            await message.answer(text, reply_markup=back_kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

    @dp.message_handler(state=States.waiting_for_cities)
    async def process_city_list(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_text = message.text.strip()
        log_query(user_id, user_text)

        if not user_text:
            kb = get_back_keyboard()
            try:
                await message.edit_text("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
            except MessageCantBeEdited:
                await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –∏ —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        cities = list(dict.fromkeys([c.strip() for c in user_text.split(",") if c.strip()]))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        if not cities:
            kb = get_back_keyboard()
            try:
                await message.edit_text("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
            except MessageCantBeEdited:
                await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        found, not_found = find_cities_in_db(cities)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API
        additional_found = []
        for city in not_found:
            exists, label = check_city_exists(city)
            if exists:
                additional_found.append((city, city))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞ –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º found, –¥–æ–±–∞–≤–ª—è—è –≥–æ—Ä–æ–¥–∞, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        if additional_found:
            found.extend(additional_found)
            # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ not_found, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            not_found = [city for city in not_found if not any(city == f[0] for f in additional_found)]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ (found –Ω–µ –ø—É—Å—Ç–æ–π)
        if found:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            await set_pagination_state(state, found, page=1)
            await show_cities_page(message, state)
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω (found –ø—É—Å—Ç–æ–π)
        else:
            not_found_list = ", ".join(not_found) if not_found else "—É–∫–∞–∑–∞–Ω–Ω—ã–µ"
            kb = get_back_keyboard()
            try:
                await message.edit_text(f"‚ùå –¢–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –∫–∞–∫ {not_found_list}, –Ω–µ—Ç", reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
            except MessageCantBeEdited:
                await message.answer(f"‚ùå –¢–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –∫–∞–∫ {not_found_list}, –Ω–µ—Ç", reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

    async def show_cities_page(message: types.Message | types.CallbackQuery, state: FSMContext):
        cities, current_page = await get_pagination_state(state)
        if not cities:
            kb = get_back_keyboard()
            if isinstance(message, types.Message):
                try:
                    await message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç", reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                except MessageCantBeEdited:
                    await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç", reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            else:
                try:
                    await message.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç", reply_markup=kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
                except MessageCantBeEdited:
                    await message.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç", reply_markup=kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            return

        ITEMS_PER_PAGE = 4
        total_pages = (len(cities) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        if current_page < 1 or current_page > total_pages:
            current_page = 1

        start_idx = (current_page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_cities = cities[start_idx:end_idx]

        weather_kb = InlineKeyboardMarkup(row_width=1)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for user_city, official_city in page_cities:
            label = get_weather_label(official_city)
            cb_data = f"details|{official_city}"
            weather_kb.add(InlineKeyboardButton(label, callback_data=cb_data))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_kb = InlineKeyboardMarkup(row_width=3)
        if current_page > 1:
            pagination_kb.insert(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{current_page-1}"))
        pagination_kb.insert(InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}", callback_data="none"))
        if current_page < total_pages:
            pagination_kb.insert(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"page_{current_page+1}"))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        weather_kb.inline_keyboard.extend(pagination_kb.inline_keyboard)
        weather_kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu"))

        try:
            if isinstance(message, types.Message):
                await message.edit_text("–í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–∞–º (—Å–º. –∫–Ω–æ–ø–∫–∏):", reply_markup=weather_kb)
            else:
                await message.message.edit_text("–í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–∞–º (—Å–º. –∫–Ω–æ–ø–∫–∏):", reply_markup=weather_kb)
        except (MessageCantBeEdited, InlineKeyboardExpected):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if isinstance(message, types.Message):
                await message.answer("–í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–∞–º (—Å–º. –∫–Ω–æ–ø–∫–∏):", reply_markup=weather_kb)
            else:
                await message.message.answer("–í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–∞–º (—Å–º. –∫–Ω–æ–ø–∫–∏):", reply_markup=weather_kb)

    @dp.callback_query_handler(lambda c: c.data.startswith("page_"), state=States.waiting_for_cities)
    async def handle_pagination(query: types.CallbackQuery, state: FSMContext):
        await query.answer()
        page = int(query.data.split("_")[1])
        cities, _ = await get_pagination_state(state)  # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—É—Ç–∏–Ω—ã
        await set_pagination_state(state, cities, page=page)
        await show_cities_page(query, state)

    @dp.callback_query_handler(lambda c: c.data.startswith("details|"), state='*')
    async def callback_details(query: types.CallbackQuery, state: FSMContext):
        await query.answer()
        _, city_name = query.data.split("|", 1)
        info = get_detailed_weather(city_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        back_kb = InlineKeyboardMarkup()
        back_kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu"))
        
        try:
            await query.message.edit_text(info, reply_markup=back_kb)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
        except (MessageCantBeEdited, InlineKeyboardExpected):
            await query.message.answer(info, reply_markup=back_kb)  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

    @dp.message_handler(content_types=['text'], state='*')
    async def fallback_text(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_text = message.text.strip()
        log_query(user_id, user_text)

        try:
            await message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
        except (MessageCantBeEdited, InlineKeyboardExpected):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")  # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ